/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package LIBRARY_PACKAGE;

import java.awt.event.*;
import java.sql.*;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rlith
 */
public class BORROW extends javax.swing.JFrame {

    /**
     * Creates new form BORROW
     */
    public BORROW() {
        initComponents();
        setExtendedState(BORROW.MAXIMIZED_BOTH); 
        
        jTable1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectRow();
            }
        });
        
       
        setLocationRelativeTo(null); // Center on screen
        setDefaultCloseOperation(BORROW.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CATEGORY = new javax.swing.JTextField();
        BORROW_BUTTON = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        COPIES = new javax.swing.JTextField();
        BOOK_ID = new javax.swing.JTextField();
        AUTHOR = new javax.swing.JTextField();
        BOOK_NAME = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        USER_ID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        FETCH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CATEGORY.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        BORROW_BUTTON.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BORROW_BUTTON.setText("BORROW");
        BORROW_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BORROW_BUTTONActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("BOOK ID");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("CANCEL");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("CATEGORY");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("BORROW BOOKS");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("BOOK NAME");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("AUTHOR");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("COPIES");

        COPIES.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        BOOK_ID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        AUTHOR.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        BOOK_NAME.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BOOK_NAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOOK_NAMEActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("USER ID");

        USER_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                USER_IDActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BOOK_ID", "CATEGORY", "BOOK_NAME", "AUTHOR", "COPIES"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        FETCH.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        FETCH.setText("FETCH");
        FETCH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FETCHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(925, 925, 925))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(292, 292, 292)
                                .addComponent(FETCH, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addGap(29, 29, 29)
                                .addComponent(BORROW_BUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addGap(29, 29, 29)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(USER_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(BOOK_NAME, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BOOK_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(CATEGORY, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(AUTHOR, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(COPIES, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))))))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FETCH, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BORROW_BUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(USER_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BOOK_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BOOK_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CATEGORY, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AUTHOR, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(COPIES, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void selectRow() {
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            BOOK_ID.setText(jTable1.getValueAt(row, 0).toString());
            CATEGORY.setText(jTable1.getValueAt(row, 1).toString());
            BOOK_NAME.setText(jTable1.getValueAt(row, 2).toString());
            AUTHOR.setText(jTable1.getValueAt(row, 3).toString());
            COPIES.setText(jTable1.getValueAt(row, 4).toString());
        }
    }

private static void updateFineStatus(Connection conn) throws SQLException {
//    String query = "UPDATE BORROW SET FINE = CASE " +
//                    "WHEN RETURN_STATUS = 'NO' AND DUE_DATE < CURDATE() THEN DATEDIFF(CURDATE(), DUE_DATE) * 10 " +
//                    "ELSE 0 END, " +
//                    "FINE_STATUS = CASE " +
//                    "WHEN RETURN_STATUS = 'NO' AND DUE_DATE < CURDATE() THEN 'YES' " +
//                    "WHEN RETURN_STATUS = 'YES' AND FINE > 0 THEN 'YES' " +
//                    "WHEN RETURN_STATUS = 'YES' AND FINE = 0 THEN 'NO' " +
//                    "WHEN RETURN_STATUS = 'YES' AND FINE_STATUS = 'PAID' THEN 'PAID' " +
//                    "ELSE FINE_STATUS END;";
//    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
//        pstmt.executeUpdate();
//    }
//}

        String updateBorrowQuery = "UPDATE BORROW SET " +
                "RETURN_DATE = CASE " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE <= DUE_DATE THEN RETURN_DATE " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() < DUE_DATE THEN NULL " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() > DUE_DATE THEN NULL " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE > DUE_DATE THEN RETURN_DATE " +
                "    ELSE RETURN_DATE END, " +
                "RETURN_STATUS = CASE " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE <= DUE_DATE THEN 'YES' " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() < DUE_DATE THEN 'NO' " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() > DUE_DATE THEN 'NO' " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE > DUE_DATE THEN 'YES' " +
                "    ELSE RETURN_STATUS END, " +
                "FINE = CASE " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE <= DUE_DATE THEN 0 " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() < DUE_DATE THEN 0 " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() > DUE_DATE THEN DATEDIFF(CURDATE(), DUE_DATE) * 10 " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE > DUE_DATE THEN DATEDIFF(RETURN_DATE, DUE_DATE) * 10 " +
                "    ELSE FINE END, " +
                "FINE_STATUS = CASE " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE <= DUE_DATE THEN 'NO' " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() < DUE_DATE THEN 'NO' " +
                "    WHEN RETURN_DATE IS NULL AND CURDATE() > DUE_DATE THEN 'YES' " +
                "    WHEN RETURN_DATE IS NOT NULL AND RETURN_DATE > DUE_DATE THEN 'YES' " +
                "    ELSE FINE_STATUS END;";

        String updateBlockQuery = "UPDATE USERS SET BLOCK = 'YES' " +
                "WHERE USER_ID IN (SELECT DISTINCT USER_ID FROM BORROW " +
                "WHERE FINE_STATUS = 'YES' AND FINE > 500)";

        // Establishing a connection
        try {
             PreparedStatement pstmt1 = conn.prepareStatement(updateBorrowQuery);
             PreparedStatement pstmt2 = conn.prepareStatement(updateBlockQuery);

            // Execute the first update for BORROW table
            int rowsUpdated1 = pstmt1.executeUpdate();
            System.out.println("BORROW table updated. Rows affected: " + rowsUpdated1);

            // Execute the second update for blocking users
            int rowsUpdated2 = pstmt2.executeUpdate();
            System.out.println("USERS table updated for blocking. Rows affected: " + rowsUpdated2);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

//private static void returnBook(Connection conn, int userId, int bookId) throws SQLException {
//    String query = "UPDATE BORROW SET RETURN_DATE = CURDATE(), RETURN_STATUS = 'YES', FINE_STATUS = CASE WHEN FINE > 0 THEN 'YES' ELSE 'NO' END WHERE USER_ID = ? AND BOOK_ID = ? AND RETURN_STATUS = 'NO';";
//    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
//        pstmt.setInt(1, userId);
//        pstmt.setInt(2, bookId);
//        pstmt.executeUpdate();
//    }
//}
//
//private static void payFine(Connection conn, int userId) throws SQLException {
//    String query = "UPDATE BORROW SET FINE = 0, FINE_STATUS = 'PAID' WHERE USER_ID = ? AND FINE > 0;";
//    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
//        pstmt.setInt(1, userId);
//        pstmt.executeUpdate();
//    }
//}


////////////////////////////////////////////
    private static void blockHighFineUsers(Connection conn) throws SQLException {
        String query = "UPDATE BORROW SET BLOCK = 'YES' " +"WHERE USER_ID IN (SELECT DISTINCT USER_ID FROM BORROW " + "WHERE FINE_STATUS = 'YES' AND FINE > 500);";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.executeUpdate();
        }
    }

    // Check if user has pending fines or overdue books
    private static boolean canUserBorrow(Connection conn, int userId) throws SQLException {
        String query = "SELECT BLOCK FROM USERS WHERE USER_ID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("BLOCK") == 0; // User can borrow if not blocked
            }
        }
        return false;
    } 


    // Get count of books user has borrowed
    private static int getUserBorrowedBookCount(Connection conn, int userId) throws SQLException {
        String query = "SELECT COUNT(DISTINCT(BOOK_ID)) AS counts FROM BORROW WHERE USER_ID = ? AND RETURN_DATE IS NULL";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
//                System.out.println(rs.getInt(1));
                return rs.getInt("counts");
            }
        }
        return 0;
    }

    
    // Borrow Book (Insert transaction record)
    private static void borrowBook(Connection conn, int userId, int bookId, int copies) throws SQLException {
        String query = "INSERT INTO BORROW (USER_ID, BOOK_ID, COPIES, ISSUE_DATE, DUE_DATE, RETURN_STATUS, FINE, FINE_STATUS) VALUES (?, ?, ?, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 14 DAY),'NO', 0, 'NO')";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, bookId);
            pstmt.setInt(3, copies);
            pstmt.executeUpdate();
        }
    }
    
    private static void updateBookCopies(Connection conn, int bookId, int borrowedCopies) throws SQLException {
        String query = "UPDATE BOOK SET COPIES = COPIES - ? WHERE BOOK_ID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, borrowedCopies);
            pstmt.setInt(2, bookId);
            pstmt.executeUpdate();
        }
    }
    
    private static boolean isBookAvailable(Connection conn, int bookId, int requestedCopies) throws SQLException {
        String query = "SELECT COPIES FROM BOOKS WHERE BOOK_ID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, bookId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("COPIES") >= requestedCopies; // Check if enough copies exist
            }
        }
        return false;
    }



    private void BORROW_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BORROW_BUTTONActionPerformed
        // TODO add your handling code here:
     
        String url = "jdbc:mysql://localhost:3306/LIBRARY_MANAGEMENT_SYSTEM";
        String user = "root";
        String pass = "Lithiyasree12@";

        
        
        String userId = USER_ID.getText().trim();
        String bookId = BOOK_ID.getText().trim();
        String copiesText = COPIES.getText().trim();

        if (userId.isEmpty() || bookId.isEmpty() || copiesText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!");
            return;
        }

     // 1. Check if USER_ID exists
//            String userCheckQuery = "SELECT COUNT(*) FROM USERS WHERE USER_ID = ?";
//            try (PreparedStatement userCheckStmt = conn.prepareStatement(userCheckQuery)) {
//                userCheckStmt.setInt(1, user_id);
//                ResultSet userCheckRs = userCheckStmt.executeQuery();
//                if (userCheckRs.next() && userCheckRs.getInt(1) == 0) {
//                    JOptionPane.showMessageDialog(this, "User ID not found!");
//                    return;
//                }
//            }
//
//            // 2. Check if BOOK_ID exists
//            String bookCheckQuery = "SELECT COPIES FROM BOOKS WHERE BOOK_ID = ?";
//            int availableCopies = 0;
//            try (PreparedStatement bookCheckStmt = conn.prepareStatement(bookCheckQuery)) {
//                bookCheckStmt.setInt(1, book_id);
//                ResultSet bookCheckRs = bookCheckStmt.executeQuery();
//                if (bookCheckRs.next()) {
//                    availableCopies = bookCheckRs.getInt("COPIES");
//                    if (bookCheckRs.wasNull()) {
//                        JOptionPane.showMessageDialog(this, "Book data is incorrect! Please check the database.");
//                        return;
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(this, "Book ID not found!");
//                    return;
//                }
//            }
//            
//            
//
////            // 3. Check if user has unpaid fine > 500
////            String fineQuery = "SELECT SUM(FINE) AS total_fine FROM BORROW WHERE USER_ID = ? AND FINE_STATUS = 'NO'";
////            try (PreparedStatement fineStmt = conn.prepareStatement(fineQuery)) {
////                fineStmt.setInt(1, user_id);
////                ResultSet fineRs = fineStmt.executeQuery();
////                if (fineRs.next() && fineRs.getInt("total_fine") > 500) {
////                    JOptionPane.showMessageDialog(this, "You have an unpaid fine exceeding 500! Please clear it before borrowing.");
////                    return;
////                }
////            }
////
////            // 4. Check if user already borrowed 10 different books




        try (Connection conn = DriverManager.getConnection(url, user, pass)) {
            
            int user_id, book_id, copies;
            try{
                user_id = Integer.parseInt(userId);
                book_id = Integer.parseInt(bookId);
                copies = Integer.parseInt(copiesText);
            }catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input! User ID, Book ID, and Copies must be numbers.");
                return;
            }
            
            updateFineStatus(conn);
            blockHighFineUsers(conn);

            // Check if the user has unpaid fines or overdue books
            if (!canUserBorrow(conn, user_id)) {
                JOptionPane.showMessageDialog(this, "You have unpaid fines or overdue books. Please return books and pay the fine.");
                System.out.println("You have unpaid fines or overdue books. Please return books and pay the fine."+" "+user_id);
                return;
            }       
            
            if (copies > 5 || copies <= 0) {
                System.out.println("You can only borrow between 1 to 5 copies of a book.");
                JOptionPane.showMessageDialog(this, "You can only borrow between 1 to 5 copies of a book.");
                return;
            }

            // Check if user already borrowed 10 books
            if (getUserBorrowedBookCount(conn, user_id) >= 10) {
                System.out.println("You have reached the maximum limit of 10 borrowed books.");
                JOptionPane.showMessageDialog(this, "You have reached the maximum limit of 10 borrowed books.");
                return;
            }
            
            if (!isBookAvailable(conn, book_id, copies)) {
                JOptionPane.showMessageDialog(this, "Not enough copies available!");
                return;
            }

            // Insert Borrow Transaction
            borrowBook(conn, user_id, book_id, copies);
            
            System.out.println("Book borrowed successfully! Return within 14 or 30 days to avoid fines.");
            JOptionPane.showMessageDialog(this, "Book borrowed successfully! Return within 14 or 30 days to avoid fines.");
            
            updateBookCopies(conn, book_id, copies);
            //updateFineStatus(conn);
        } catch (SQLException e) {
            e.printStackTrace();
        }
   

    }//GEN-LAST:event_BORROW_BUTTONActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void BOOK_NAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOOK_NAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BOOK_NAMEActionPerformed

    private void FETCHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FETCHActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        String url = "jdbc:mysql://localhost:3306/LIBRARY_MANAGEMENT_SYSTEM";
        String user = "root";
        String pass = "Lithiyasree12@";

        String query = "SELECT BOOK_ID, CATEGORY, BOOK_NAME, AUTHOR, COPIES FROM BOOKS;";

        try{

            Connection conn = DriverManager.getConnection(url,user,pass);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while(rs.next()){
                int book_id = rs.getInt("BOOK_ID");
                String category = rs.getString("CATEGORY");
                String book_name = rs.getString("BOOK_NAME");
                String author = rs.getString("AUTHOR");
                int copies = rs.getInt("COPIES");
                model.addRow(new Object[] {book_id, category, book_name, author, copies});
            }
            rs.close();
            stmt.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }//GEN-LAST:event_FETCHActionPerformed

    private void USER_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_USER_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_USER_IDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BORROW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BORROW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BORROW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BORROW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BORROW().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AUTHOR;
    private javax.swing.JTextField BOOK_ID;
    private javax.swing.JTextField BOOK_NAME;
    private javax.swing.JButton BORROW_BUTTON;
    private javax.swing.JTextField CATEGORY;
    private javax.swing.JTextField COPIES;
    private javax.swing.JButton FETCH;
    private javax.swing.JTextField USER_ID;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
