/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package LIBRARY_PACKAGE;
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rlith
 */
public class MANAGE_STUDENT extends javax.swing.JFrame {

    private DefaultTableModel Model;
    private static final String url = "jdbc:mysql://localhost:3306/LIBRARY_MANAGEMENT_SYSTEM"; 
    private static final String user = "root"; 
    private static final String pass = "Lithiyasree12@";
    
   

    
    public MANAGE_STUDENT() {
        initComponents();

        Model = (DefaultTableModel) STUDENT.getModel(); // Get Table Model

        // Remove all existing action listeners
        for (ActionListener al : UPDATE_DATABASE.getActionListeners()) {
            UPDATE_DATABASE.removeActionListener(al);
        }

           // âœ… Add TableModelListener to detect changes in JTable
        UPDATE_DATABASE.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               UPDATE_DATABASEActionPerformed(e);
           }
       });
     

    }
    
    
    
    
    
    private void updateDatabase(int row) {
        String updateQuery = "UPDATE USER SET USER_NAME=?, USER_ID=?, EMAIL=?, MOBILE=?, BRANCH=?, DEPARTMENT=?, SEMESTER=? WHERE ID=? AND USER_TYPE='STUDENT'";

        try (Connection conn = DriverManager.getConnection(url, user, pass);
             PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {

            int id = (int) Model.getValueAt(row, 0); // ID column (Primary Key)
            String student_id = (String) Model.getValueAt(row, 1);
            String studentName = (String) Model.getValueAt(row, 2);
            String email = (String) Model.getValueAt(row, 3);
            String mobile = (String) Model.getValueAt(row, 4);
            String branch = (String) Model.getValueAt(row, 5);
            String department = (String) Model.getValueAt(row, 6);
            String semester = (String) Model.getValueAt(row, 7);
          

            // Set values in PreparedStatement
            pstmt.setString(1, studentName);
            pstmt.setString(2, student_id);
            pstmt.setString(3, email);
            pstmt.setString(4, mobile);
            pstmt.setString(5, branch);
            pstmt.setString(6, department);
            pstmt.setString(7, semester);
            pstmt.setInt(8, id);

            int rowsUpdated = pstmt.executeUpdate(); // Execute update

            if (rowsUpdated >0) {
                JOptionPane.showMessageDialog(this, "Row updated successfully in the database.");
            } else {
                JOptionPane.showMessageDialog(this, "Update failed.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating student data: " + e.getMessage());
        }
}

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        STUDENT = new javax.swing.JTable();
        FETCH = new javax.swing.JButton();
        CANCEL = new javax.swing.JButton();
        FILTERS = new javax.swing.JComboBox<>();
        SEARCH_BAR = new javax.swing.JTextField();
        UPDATE_DATABASE = new javax.swing.JButton();
        REMOVE = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CLEAR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        STUDENT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        STUDENT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "STUDENT ID", "STUDENT NAME", "EMAIL", "MOBILE", "BRANCH", "DEPARTMENT", "SEMESTER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(STUDENT);

        FETCH.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        FETCH.setText("FETCH");
        FETCH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FETCHActionPerformed(evt);
            }
        });

        CANCEL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CANCEL.setText("CANCEL");
        CANCEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CANCELActionPerformed(evt);
            }
        });

        FILTERS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FILTERS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "USER_ID", "USER_NAME", "BRANCH", "DEPARTMENT", "SEMESTER", "EMAIL", "MOBILE", " ", " ", " ", " ", " ", " ", " " }));
        FILTERS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FILTERSActionPerformed(evt);
            }
        });

        SEARCH_BAR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SEARCH_BAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SEARCH_BARActionPerformed(evt);
            }
        });

        UPDATE_DATABASE.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UPDATE_DATABASE.setText("UPDATE ");
        UPDATE_DATABASE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATE_DATABASEActionPerformed(evt);
            }
        });

        REMOVE.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        REMOVE.setText("REMOVE");
        REMOVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REMOVEActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE STUDENT DETAILS");

        CLEAR.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CLEAR.setText("X");
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(759, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(FILTERS, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SEARCH_BAR, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CLEAR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FETCH, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(UPDATE_DATABASE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(REMOVE)
                                .addGap(18, 18, 18)
                                .addComponent(CANCEL)))
                        .addGap(73, 73, 73))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FILTERS, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SEARCH_BAR, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FETCH, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UPDATE_DATABASE, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CANCEL, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(REMOVE, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FETCHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FETCHActionPerformed
                                   

    DefaultTableModel model = (DefaultTableModel) STUDENT.getModel();
    model.setRowCount(0); // Clear table before fetching

    String keyword = SEARCH_BAR.getText().trim();
    String selectedFilter = FILTERS.getSelectedItem().toString();
    boolean applyFilter = !keyword.isEmpty() && !selectedFilter.equalsIgnoreCase("ALL");

    String query;
    if (applyFilter) {
        query = "SELECT ID, USER_ID, USER_NAME, EMAIL, MOBILE, BRANCH, DEPARTMENT, SEMESTER " +
                "FROM USER WHERE " + selectedFilter + " LIKE ? AND USER_TYPE= 'STUDENT'";
    } else {
        query = "SELECT ID, USER_ID, USER_NAME, EMAIL, MOBILE, BRANCH, DEPARTMENT, SEMESTER FROM USER WHERE USER_TYPE='STUDENT'";
    }

    try (Connection conn = DriverManager.getConnection(url, user, pass);
         PreparedStatement pstmt = conn.prepareStatement(query)) {

        if (applyFilter) {
            pstmt.setString(1, "%" + keyword + "%");  // Apply wildcard search
        }

        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            model.addRow(new Object[]{
                    rs.getInt("ID"),
                    rs.getString("USER_ID"),
                    rs.getString("USER_NAME"),
                    rs.getString("EMAIL"),
                    rs.getString("MOBILE"),
                    rs.getString("BRANCH"),
                    rs.getString("DEPARTMENT"),
                    rs.getString("SEMESTER")
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading student data: " + e.getMessage());
    }


    }//GEN-LAST:event_FETCHActionPerformed

    private void CANCELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CANCELActionPerformed
         this.dispose();
    }//GEN-LAST:event_CANCELActionPerformed

    private void FILTERSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FILTERSActionPerformed

    }//GEN-LAST:event_FILTERSActionPerformed

    private void UPDATE_DATABASEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATE_DATABASEActionPerformed
        System.out.println("UPDATE_DATABASEActionPerformed called");
        int selectedRow = STUDENT.getSelectedRow(); // Get selected row

        if (selectedRow == -1) { // No row selected
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }

        // Call the method to update the database for the selected row
        updateDatabase(selectedRow);
    }//GEN-LAST:event_UPDATE_DATABASEActionPerformed

    private void SEARCH_BARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SEARCH_BARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SEARCH_BARActionPerformed

    private void REMOVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REMOVEActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = STUDENT.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to remove.");
            return;
        }

        int id = (int) Model.getValueAt(selectedRow, 0); // Get ID from first column

        // Remove from database
        try (Connection conn = DriverManager.getConnection(url,user,pass);
             PreparedStatement pstmt = conn.prepareStatement("DELETE FROM USER WHERE ID  = ? AND USER_TYPE='STUDENT'")) {
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting student: " + e.getMessage());
            return;
        }

        // Remove from table model
        Model.removeRow(selectedRow);
        JOptionPane.showMessageDialog(this, "Student removed successfully.");
    }//GEN-LAST:event_REMOVEActionPerformed

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
        // TODO add your handling code here:
        SEARCH_BAR.setText(null);
    }//GEN-LAST:event_CLEARActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MANAGE_STUDENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MANAGE_STUDENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MANAGE_STUDENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MANAGE_STUDENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MANAGE_STUDENT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CANCEL;
    private javax.swing.JButton CLEAR;
    private javax.swing.JButton FETCH;
    private javax.swing.JComboBox<String> FILTERS;
    private javax.swing.JButton REMOVE;
    private javax.swing.JTextField SEARCH_BAR;
    private javax.swing.JTable STUDENT;
    private javax.swing.JButton UPDATE_DATABASE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
