
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


package LIBRARY_PACKAGE;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JTable;

/**
 *
 * @author rlith
 */
public class RETURN_BOOK extends javax.swing.JFrame {
    
    private static DefaultTableModel model;
        
    private static final String url = "jdbc:mysql://localhost:3306/LIBRARY_MANAGEMENT_SYSTEM"; 
    private static final String user = "root"; 
    private static final String pass = "Lithiyasree12@";
    /**
     * Creates new form ADMIN_VIEW_BOOKS
     */
    public RETURN_BOOK() {
        initComponents();
        
         
        BORROW.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectBookRow();
            }
        });
        
    }
    
       private void selectBookRow() {
        int row = BORROW.getSelectedRow();
        if (row != -1) {
            TRANSACTION_ID.setText(BORROW.getValueAt(row, 0).toString());
            USER_ID.setText(BORROW.getValueAt(row, 1).toString());
            BOOK_ID.setText(BORROW.getValueAt(row, 2).toString());
            QUANTITY.setText(BORROW.getValueAt(row, 5).toString());
            TITLE.setText(BORROW.getValueAt(row, 4).toString());
            USER_NAME.setText(BORROW.getValueAt(row, 3).toString());
            FINE.setText(BORROW.getValueAt(row, 11).toString());
                   
        }
    }

  

    
    private void refreshBorrowTable(JTable BORROW, Connection conn) {
        DefaultTableModel model = (DefaultTableModel) BORROW.getModel();
        model.setRowCount(0);

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM borrow")) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("borrow_id"),
                    rs.getString("user_id"),
                    rs.getString("book_id"),
                    rs.getInt("quantity"),
                    rs.getInt("fine")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

       
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        BORROW = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        END = new com.toedter.calendar.JDateChooser();
        START = new com.toedter.calendar.JDateChooser();
        SEARCH_BY_DATE = new javax.swing.JButton();
        RETURN = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        BOOK_FILTERS = new javax.swing.JComboBox<>();
        BOOK_SEARCH_BAR = new javax.swing.JTextField();
        CLEAR_BOOK = new javax.swing.JButton();
        FETCH_BOOK = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        QUANTITY = new javax.swing.JTextField();
        BOOK_ID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        USER_ID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TITLE = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        USER_NAME = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ISSUE_DATE = new com.toedter.calendar.JDateChooser();
        DUE_DATE = new com.toedter.calendar.JDateChooser();
        RETURN_DATE = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        FINE = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        TRANSACTION_ID = new javax.swing.JTextField();
        FINE_PAID = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        RETURNED_COPIES = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BORROW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TRANSACTION ID", "USER ID", "BOOK_ID", "USER NAME", "TITLE", "QUANTITY", "ISSUE_DATE", "DUE_DATE", "RETURN_DATE", "DAYS_OVERDUE", "RETURN_STATUS", "FINE", "FINE_STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(BORROW);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("START DATE");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("END DATE");

        START.setDateFormatString("yyyy mm dd");

        SEARCH_BY_DATE.setText("SEARCH BY DATE");

        RETURN.setText("RETURN BOOK");
        RETURN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RETURNActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("RETURN BOOK");

        BOOK_FILTERS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BOOK_FILTERS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "TRANSACTION_ID", "BK.BOOK_ID", "U.USER_ID", "USER_NAME", "TITLE", "QUANTITY", "ISSUE_DATE", "DUE_DATE", "RETURN_DATE", "RETURN_STATUS", "FINE", "FINE_STATUS", "DAYS_OVERDUE", " ", " ", " ", " ", " ", " " }));
        BOOK_FILTERS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOOK_FILTERSActionPerformed(evt);
            }
        });

        BOOK_SEARCH_BAR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BOOK_SEARCH_BAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOOK_SEARCH_BARActionPerformed(evt);
            }
        });

        CLEAR_BOOK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CLEAR_BOOK.setText("X");
        CLEAR_BOOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEAR_BOOKActionPerformed(evt);
            }
        });

        FETCH_BOOK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        FETCH_BOOK.setText("Fetch Book");
        FETCH_BOOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FETCH_BOOKActionPerformed(evt);
            }
        });

        jLabel8.setText("TRANSACTION ID");

        jLabel9.setText("BOOK ID");

        jLabel10.setText("QUANTITY");

        jLabel4.setText("TITLE");

        jLabel6.setText("DUE DATE");

        jLabel7.setText("ISSUE DATE");

        jLabel14.setText("FINE");

        jLabel11.setText("USER NAME");

        ISSUE_DATE.setDateFormatString("yyyy MM dd");

        DUE_DATE.setDateFormatString("yyyy MM dd");

        RETURN_DATE.setDateFormatString("yyyy MM dd");

        jLabel15.setText("RETURN DATE");

        jLabel12.setText("USER ID");

        jLabel16.setText("FINE_PAID");

        jLabel17.setText("RETURNED_COPIES");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BOOK_FILTERS, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BOOK_SEARCH_BAR, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CLEAR_BOOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FETCH_BOOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(479, 479, 479)
                        .addComponent(RETURN, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(START, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(END, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(SEARCH_BY_DATE, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(39, 39, 39)
                                .addComponent(FINE_PAID))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ISSUE_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TITLE, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(USER_NAME, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(QUANTITY)
                                    .addComponent(BOOK_ID)
                                    .addComponent(USER_ID, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DUE_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RETURN_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(FINE, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TRANSACTION_ID, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(39, 39, 39)
                                .addComponent(RETURNED_COPIES)))
                        .addGap(351, 351, 351))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BOOK_FILTERS, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BOOK_SEARCH_BAR, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FETCH_BOOK, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CLEAR_BOOK, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(END, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(START, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SEARCH_BY_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TRANSACTION_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(USER_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BOOK_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(QUANTITY, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TITLE, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(USER_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ISSUE_DATE, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DUE_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RETURN_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FINE, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(RETURN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FINE_PAID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RETURNED_COPIES, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RETURNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RETURNActionPerformed
//String userId = USER_ID.getText().trim();
//        String bookId = BOOK_ID.getText().trim();
//        int returnCopies = Integer.parseInt(QUANTITY.getText().trim());
        String user_name  = USER_NAME.getText().trim();
        String title  =TITLE.getText().trim();
        
                 
//**********************************************************************

         // Get selected date from JDateChooser
java.util.Date selectedIssueDate = ISSUE_DATE.getDate();
java.util.Date selectedDueDate = DUE_DATE.getDate();
java.util.Date selectedReturnDate = RETURN_DATE.getDate();

java.util.Date issueDate, dueDate, returnDate;

// If ISSUE_DATE is not selected, set it to the current date
if (selectedIssueDate == null) {
    issueDate = new java.util.Date(); // Set as current date
} else {
    issueDate = selectedIssueDate;
}

// If DUE_DATE is not selected, calculate it automatically (14 days from issue date)
if (selectedDueDate == null) {
    java.util.Calendar cal = java.util.Calendar.getInstance();
    cal.setTime(issueDate);
    cal.add(java.util.Calendar.DAY_OF_MONTH, 14); // Add 14 days for due date
    dueDate = cal.getTime();
} else {
    dueDate = selectedDueDate;
}

if (selectedReturnDate == null) {
    returnDate = new java.util.Date(); // Set as current date
} else {
    returnDate = selectedReturnDate;
}

// Set the dates in JDateChooser
ISSUE_DATE.setDate(issueDate);
DUE_DATE.setDate(dueDate);
RETURN_DATE.setDate(returnDate);

// Convert to SQL format
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
String issueDateStr = sdf.format(issueDate);
String dueDateStr = sdf.format(dueDate);
String returnDateStr = sdf.format(returnDate);


//*************************************************************************
    String userId = USER_ID.getText().trim();
    String bookId = BOOK_ID.getText().trim();
    int returnCopies = Integer.parseInt(RETURNED_COPIES.getText().trim()); // Copies being returned
    int finePaid = Integer.parseInt(FINE_PAID.getText().trim()); // Fine paid by user
    int borrowId = Integer.parseInt(TRANSACTION_ID.getText().trim()); // Borrow transaction ID

    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        conn = DriverManager.getConnection(url, user, pass);
        conn.setAutoCommit(false); // Start transaction

        // ✅ Step 1: Fetch Borrow Record
        String borrowQuery = "SELECT QUANTITY, RETURNED_COPIES, FINE, FINE_PAID_AMOUNT FROM BORROW WHERE TRANSACTION_ID = ?";
        stmt = conn.prepareStatement(borrowQuery);
        stmt.setInt(1, borrowId);
        rs = stmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(null, "No borrow record found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int totalBorrowed = rs.getInt("QUANTITY");
        int previouslyReturned = rs.getInt("RETURNED_COPIES");
        int totalFine = rs.getInt("FINE");
        int previouslyPaidFine = rs.getInt("FINE_PAID_AMOUNT");

        // ✅ Step 2: Calculate Updated Values
        int updatedReturnedCopies = previouslyReturned + returnCopies;
        int updatedFinePaid = previouslyPaidFine + finePaid;

        // ✅ Step 3: Update BORROW Table
        String updateBorrowQuery = "UPDATE BORROW SET RETURNED_COPIES = ?, FINE_PAID_AMOUNT = ? WHERE TRANSACTION_ID = ?";
        stmt = conn.prepareStatement(updateBorrowQuery);
        stmt.setInt(1, updatedReturnedCopies);
        stmt.setInt(2, updatedFinePaid);
        stmt.setInt(3, borrowId);
        stmt.executeUpdate();

        // ✅ Step 4: Check If Fully Returned and Fine Fully Paid
        if (updatedReturnedCopies == totalBorrowed && updatedFinePaid == totalFine) {
            // Move to TRANSACTION Table
            String insertTransactionQuery = "INSERT INTO TRANSACTION (USER_ID, BOOK_ID, QUANTITY, STATUS) VALUES (?, ?, ?, 'Returned')";
            stmt = conn.prepareStatement(insertTransactionQuery);
            stmt.setString(1, userId);
            stmt.setString(2, bookId);
            stmt.setInt(3, updatedReturnedCopies);
            stmt.executeUpdate();

            // Remove from BORROW Table
            String deleteBorrowQuery = "DELETE FROM BORROW WHERE TRANSACTION_ID = ?";
            stmt = conn.prepareStatement(deleteBorrowQuery);
            stmt.setInt(1, borrowId);
            stmt.executeUpdate();
        }

        conn.commit(); // ✅ Commit transaction
        JOptionPane.showMessageDialog(null, "Book return process completed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        refreshBorrowTable(BORROW, conn); // ✅ Refresh UI Table
    } catch (SQLException e) {
        try {
            if (conn != null) conn.rollback(); // Rollback on error
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } 
//-------------------------------------------------------------------------------------------------------------------------------------------------
    
//        Connection conn = null;
//        PreparedStatement stmt = null;
//        ResultSet rs = null;
//
//        try {
//            conn = DriverManager.getConnection(url,user,pass);
//            conn.setAutoCommit(false); // Transaction Start
//
//            // ✅ 1. Get input values from text fields
////            Date issueDate = Date.valueOf(issueDateField.getText().trim());  // Format: YYYY-MM-DD
////            Date returnDate = Date.valueOf(returnDateField.getText().trim()); // Format: YYYY-MM-DD
////            Date dueDate = Date.valueOf(dueDateField.getText().trim());       // Format: YYYY-MM-DD
//            int fine = Integer.parseInt(FINE.getText().trim());
// int borrowId = Integer.parseInt(TRANSACTION_ID.getText().trim());
// System.out.println(borrowId);
//            // ✅ 2. Check Borrow Table for Existing Record
//            String borrowQuery = "SELECT QUANTITY, FINE FROM borrow WHERE TRANSACTION_ID = ?";
//            stmt = conn.prepareStatement(borrowQuery);
//            stmt.setInt(1, borrowId);
//            rs = stmt.executeQuery();
//
//            if (!rs.next()) {
//                JOptionPane.showMessageDialog(null, "No borrow record found!", "Error", JOptionPane.ERROR_MESSAGE);
//                return;
//            }
//
//            int borrowedCopies = rs.getInt("quantity");
//            int totalFine = rs.getInt("fine");
//
////            int returnCopies = borrowedCopies; // Assuming returning all copies
//
//            // ✅ 3. Update Book Table (Return Books)
//            String updateBookQuery = "UPDATE book SET quantity = quantity + ? WHERE book_id = ?";
//            stmt = conn.prepareStatement(updateBookQuery);
//            stmt.setInt(1, returnCopies);
//            stmt.setString(2, bookId);
//            stmt.executeUpdate();
//System.out.println(returnCopies+ " "+borrowedCopies);
//            // ✅ 4. Handle Complete or Partial Return
//            if (returnCopies == borrowedCopies) {
//                if (totalFine == 0) {
//                    // No fine, add transaction & remove from borrow table
//                    String insertTransaction = "INSERT INTO transaction (user_id, book_id, quantity, status) VALUES (?, ?, ?, 'Returned')";
//                    stmt = conn.prepareStatement(insertTransaction);
//                    stmt.setString(1, userId);
//                    stmt.setString(2, bookId);
//                    stmt.setInt(3, returnCopies);
//                    stmt.executeUpdate();
//
//                } else {
//                    // Fine pending, add to overdue table
//                    String insertOverdue = "INSERT INTO overdue (user_id, book_id, fine) VALUES (?, ?, ?)";
//                    stmt = conn.prepareStatement(insertOverdue);
//                    stmt.setString(1, userId);
//                    stmt.setString(2, bookId);
//                    stmt.setInt(3, totalFine);
//                    stmt.executeUpdate();
//                }
//                String deleteBorrow = "DELETE FROM borrow WHERE TRANSACTION_ID = ?";
//                    stmt = conn.prepareStatement(deleteBorrow);
//                    stmt.setInt(1, borrowId);
//                    stmt.executeUpdate();
//            } else {
//                // Partial return: Update borrow_table
//                String updateBorrow = "UPDATE borrow SET quantity = quantity - ?, fine = ? WHERE TRANSACTION_ID = ?";
//                stmt = conn.prepareStatement(updateBorrow);
//                stmt.setInt(1, returnCopies);
//                stmt.setInt(2, totalFine);
//                stmt.setInt(3, borrowId);
//                stmt.executeUpdate();
//
//                String insertTransaction = "INSERT INTO transaction (user_id, book_id, quantity, status) VALUES (?, ?, ?, 'Partial Return')";
//                stmt = conn.prepareStatement(insertTransaction);
//                stmt.setString(1, userId);
//                stmt.setString(2, bookId);
//                stmt.setInt(3, returnCopies);
//                stmt.executeUpdate();
//            }
//
//            conn.commit(); // Commit transaction
//            JOptionPane.showMessageDialog(null, "Book return process completed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
//
//            // ✅ Refresh JTable
//            refreshBorrowTable(BORROW, conn);
//        } catch (SQLException e) {
//            try {
//                if (conn != null) conn.rollback(); // Rollback on error
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }
//        finally {
//            try {
//                if (rs != null) rs.close();
//                if (stmt != null) stmt.close();
//                if (conn != null) conn.close();
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//        }

    }//GEN-LAST:event_RETURNActionPerformed

    private void BOOK_FILTERSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOOK_FILTERSActionPerformed

    }//GEN-LAST:event_BOOK_FILTERSActionPerformed

    private void BOOK_SEARCH_BARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOOK_SEARCH_BARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BOOK_SEARCH_BARActionPerformed

    private void CLEAR_BOOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEAR_BOOKActionPerformed
        // TODO add your handling code here:
        BOOK_SEARCH_BAR.setText(null);
    }//GEN-LAST:event_CLEAR_BOOKActionPerformed

    private void FETCH_BOOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FETCH_BOOKActionPerformed

        DefaultTableModel model = (DefaultTableModel) BORROW.getModel();
        model.setRowCount(0); // Clear table before fetching

        String keyword = BOOK_SEARCH_BAR.getText().trim();
        String selectedFilter = BOOK_FILTERS.getSelectedItem().toString();
        boolean applyFilter = !keyword.isEmpty() && !selectedFilter.equalsIgnoreCase("ALL");

        String query;
    if (applyFilter) {
        query = "SELECT B.TRANSACTION_ID, B.USER_ID, B.BOOK_ID, U.USER_NAME, BK.TITLE, " +
                "B.QUANTITY, B.ISSUE_DATE, B.DUE_DATE, B.RETURN_DATE, B.RETURN_STATUS, " +
                "B.FINE, B.FINE_STATUS, B.DAYS_OVERDUE " +
                "FROM BORROW B " +
                "JOIN USER U ON B.USER_ID = U.USER_ID " +  // Assuming USER_NAME is in USERS table
                "JOIN BOOK BK ON B.BOOK_ID = BK.BOOK_ID " + // Fetch TITLE from BOOKS table
                "WHERE " + selectedFilter + " LIKE ?";
    } else {
        query = "SELECT B.TRANSACTION_ID, B.USER_ID, B.BOOK_ID, U.USER_NAME, BK.TITLE, " +
                "B.QUANTITY, B.ISSUE_DATE, B.DUE_DATE, B.RETURN_DATE, B.RETURN_STATUS, " +
                "B.FINE, B.FINE_STATUS, B.DAYS_OVERDUE " +
                "FROM BORROW B " +
                "JOIN USER U ON B.USER_ID = U.USER_ID " +
                "JOIN BOOK BK ON B.BOOK_ID = BK.BOOK_ID";
    }

        try (Connection conn = DriverManager.getConnection(url, user, pass);
            PreparedStatement pstmt = conn.prepareStatement(query)) {

            if (applyFilter) {
                pstmt.setString(1, "%" + keyword + "%");  // Apply wildcard search
            }

            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                   rs.getInt("TRANSACTION_ID"),
                        rs.getString("USER_ID"),
                        rs.getString("BOOK_ID"),
                        rs.getString("USER_NAME"),
                        rs.getString("TITLE"),
                        rs.getInt("QUANTITY"),
                        rs.getDate("ISSUE_DATE"),
                        rs.getDate("DUE_DATE"),
                        rs.getDate("RETURN_DATE"),
                         rs.getInt("DAYS_OVERDUE"),
                        rs.getString("RETURN_STATUS"),
                        rs.getInt("FINE"),
                        rs.getString("FINE_STATUS")

                });
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading student data: " + e.getMessage());
        }
    }//GEN-LAST:event_FETCH_BOOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RETURN_BOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RETURN_BOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RETURN_BOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RETURN_BOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RETURN_BOOK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BOOK_FILTERS;
    private javax.swing.JTextField BOOK_ID;
    private javax.swing.JTextField BOOK_SEARCH_BAR;
    private javax.swing.JTable BORROW;
    private javax.swing.JButton CLEAR_BOOK;
    private com.toedter.calendar.JDateChooser DUE_DATE;
    private com.toedter.calendar.JDateChooser END;
    private javax.swing.JButton FETCH_BOOK;
    private javax.swing.JTextField FINE;
    private javax.swing.JTextField FINE_PAID;
    private com.toedter.calendar.JDateChooser ISSUE_DATE;
    private javax.swing.JTextField QUANTITY;
    private javax.swing.JButton RETURN;
    private javax.swing.JTextField RETURNED_COPIES;
    private com.toedter.calendar.JDateChooser RETURN_DATE;
    private javax.swing.JButton SEARCH_BY_DATE;
    private com.toedter.calendar.JDateChooser START;
    private javax.swing.JTextField TITLE;
    private javax.swing.JTextField TRANSACTION_ID;
    private javax.swing.JTextField USER_ID;
    private javax.swing.JTextField USER_NAME;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
